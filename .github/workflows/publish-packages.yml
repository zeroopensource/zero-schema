name: Publish Monorepo Packages

# on:
#   push:
#     branches:
#       - main
#       - dev

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node (v20 LTS)
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Set up pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm turbo run build

      - name: Find changed packages and paths
        id: changed
        run: |
          # Get changed package names
          CHANGED_NAMES=$(pnpm turbo run build --dry=json | jq -r '.tasks[].package')

          # Get full workspace metadata
          pnpm m ls --json > workspace.json

          # Map names to paths
          echo "changed_list=" >> $GITHUB_OUTPUT
          for pkg in $CHANGED_NAMES; do
            path=$(jq -r --arg name "$pkg" '.[] | select(.name==$name) | .path' workspace.json)
            if [ -n "$path" ]; then
              echo "$pkg:$path" >> changed.txt
            fi
          done

          # Save comma-separated list like @pkg/name:packages/real-path
          CHANGED_LIST=$(paste -sd "," changed.txt)
          echo "changed_list=$CHANGED_LIST" >> $GITHUB_OUTPUT

      - name: Publish changed packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          IFS=',' read -ra ENTRIES <<< "${{ steps.changed.outputs.changed_list }}"
          for entry in "${ENTRIES[@]}"; do
            IFS=':' read -r NAME PATH <<< "$entry"
            echo "Publishing $NAME at $PATH..."
            cd "$PATH"

            if [ "$BRANCH_NAME" = "main" ]; then
              pnpm version patch --no-git-tag-version
              pnpm publish
            elif [ "$BRANCH_NAME" = "dev" ]; then
              pnpm version prerelease --preid=beta --no-git-tag-version
              pnpm publish --tag beta
            fi

            VERSION=$(node -p "require('./package.json').version")
            cd ../..

            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add "$PATH/package.json"
            git commit -m "chore(release): $NAME@v$VERSION"
            git tag "$NAME@v$VERSION"
            git push origin "$NAME@v$VERSION"
          done
